# ~/.config/ii/credentials
# Format options:
# 1. Network-specific: network:nickname:password  
# 2. Generic: nickname:password

# Network-specific credentials (recommended for same nick on different networks)
net1:user1:your_password_here
net2:user2:your_password_here
net3:user3:your_password_here

# OR use generic format (will use same password on all networks)
# user1:your_password_here
# user2:your_password_here

# /etc/stunnel/stunnel.conf (system-wide stunnel config)
# This file should already exist and be configured for your IRC servers
# Example sections (adjust for your actual servers):

# [net1]
# accept = 6698
# connect = irc.example1.net:6697
# cert = /etc/ssl/certs/ca-certificates.crt

# [net2] 
# accept = 6697
# connect = irc.example2.net:6697
# cert = /etc/ssl/certs/ca-certificates.crt

# [net3]
# accept = 6699
# connect = irc.example3.net:6697
# cert = /etc/ssl/certs/ca-certificates.crt

# Add to ~/.bashrc or ~/.zshrc
# ii IRC aliases
alias ii-start='~/bin/ii-start start'
alias ii-stop='~/bin/ii-start stop'
alias ii-restart='~/bin/ii-start restart'

# ii-chat function using the script's quiet output
ii-chat() {
    local cmd=$(~/bin/ii-start multitail-quiet)
    if [ $? -eq 0 ] && [ -n "$cmd" ]; then
        kitty -e sh -c "$cmd"
    else
        echo "Error: Could not generate multitail command. Make sure ii is running."
        return 1
    fi
}

# Version with error suppression (if you want to hide D-Bus errors)
ii-chat-quiet() {
    local cmd=$(~/bin/ii-start multitail-quiet)
    if [ $? -eq 0 ] && [ -n "$cmd" ]; then
        kitty 2>/dev/null -e sh -c "$cmd"
    else
        echo "Error: Could not generate multitail command. Make sure ii is running."
        return 1
    fi
}

# Static version that works like your manual command
ii-chat-static() {
    kitty --config NONE -o notify_on_cmd_finish=never 2>/dev/null -e multitail -CS ii -s 2 \
        "$HOME/irc/net1/127.0.0.1/#channel1/out" \
        "$HOME/irc/net1/127.0.0.1/#channel2/out" \
        "$HOME/irc/net1/127.0.0.1/#channel3/out" \
        "$HOME/irc/net2/127.0.0.1/#channel4/out" \
        "$HOME/irc/net3/127.0.0.1/#channel5/out"
}

# Dynamic version that finds all active channels automatically  
ii-chat-all() {
    local cmd="multitail -CS ii -s 2"
    for out_file in "$HOME"/irc/*/127.0.0.1/*/out; do
        if [ -f "$out_file" ] && [[ "$out_file" != *"/nickserv/out" ]]; then
            cmd="$cmd $out_file"
        fi
    done
    kitty --config NONE -o notify_on_cmd_finish=never 2>/dev/null -e sh -c "$cmd"
}

# Individual channel aliases
alias ii-channel1='tail -f ~/irc/net1/127.0.0.1/#channel1/out'
alias ii-channel2='tail -f ~/irc/net1/127.0.0.1/#channel2/out'
alias ii-channel3='tail -f ~/irc/net1/127.0.0.1/#channel3/out'
alias ii-channel4='tail -f ~/irc/net2/127.0.0.1/#channel4/out'
alias ii-channel5='tail -f ~/irc/net3/127.0.0.1/#channel5/out'

# Quick message functions
ii-msg() {
    local server="$1"
    local channel="$2"
    shift 2
    local message="$*"
    echo "$message" > "$HOME/irc/$server/127.0.0.1/$channel/in"
}

ii-channel1-msg() { ii-msg net1 "#channel1" "$@"; }
ii-channel2-msg() { ii-msg net1 "#channel2" "$@"; }
ii-channel3-msg() { ii-msg net1 "#channel3" "$@"; }
ii-channel4-msg() { ii-msg net2 "#channel4" "$@"; }
ii-channel5-msg() { ii-msg net3 "#channel5" "$@"; }

# Status check
ii-status() {
    echo "ii processes:"
    pgrep -fl "ii -i" || echo "No ii processes running"
    echo
    echo "stunnel status:"
    pgrep -fl stunnel || echo "stunnel not running"
}

# Setup directories
ii-setup() {
    mkdir -p ~/.config/ii
    mkdir -p ~/bin
    mkdir -p ~/irc/{net1,net2,net3}
    chmod 600 ~/.config/ii/credentials 2>/dev/null || true
    echo "ii directories created. Don't forget to:"
    echo "1. Edit ~/.config/ii/credentials with your passwords"
    echo "2. Make sure /etc/stunnel/stunnel.conf is configured"
    echo "3. Copy ii-start script to ~/bin/ and make executable"
    echo "4. Enable stunnel service if needed: sudo systemctl enable stunnel"
}
