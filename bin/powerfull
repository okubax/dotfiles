#!/usr/bin/env bash
#
# Robust script to restore offlineimap, nextcloud and bluetooth services

set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${2:-$GREEN}[$(date '+%H:%M:%S')] $1${NC}"
}

log_error() {
    log "$1" "$RED" >&2
}

log_warn() {
    log "$1" "$YELLOW"
}

# Check if service is running
is_service_running() {
    local service="$1"
    local user_service="${2:-false}"
    
    if [[ "$user_service" == "true" ]]; then
        systemctl --user is-active "$service" &>/dev/null
    else
        systemctl is-active "$service" &>/dev/null
    fi
}

# Check if process is running
is_process_running() {
    pgrep -x "$1" &>/dev/null
}

start_offlineimap() {
    log "Starting offlineimap..."
    
    if is_service_running "offlineimap" "true"; then
        log_warn "⚠ offlineimap already running"
        return 0
    fi
    
    if systemctl --user start offlineimap 2>/dev/null; then
        log "✓ Started offlineimap service"
        # Give it a moment to start
        sleep 2
        if is_service_running "offlineimap" "true"; then
            log "✓ Confirmed offlineimap is running"
        else
            log_error "✗ offlineimap failed to start properly"
            return 1
        fi
    else
        log_error "✗ Failed to start offlineimap service"
        return 1
    fi
}

start_bluetooth() {
    log "Starting bluetooth..."
    
    if is_service_running "bluetooth"; then
        log_warn "⚠ Bluetooth already running"
        return 0
    fi
    
    if sudo systemctl start bluetooth 2>/dev/null; then
        log "✓ Started bluetooth service"
        # Give it a moment to start
        sleep 2
        if is_service_running "bluetooth"; then
            log "✓ Confirmed bluetooth is running"
        else
            log_error "✗ Bluetooth failed to start properly"
            return 1
        fi
    else
        log_error "✗ Failed to start bluetooth service"
        return 1
    fi
}

start_nextcloud() {
    log "Starting nextcloud..."
    
    if is_process_running "nextcloud"; then
        log_warn "⚠ Nextcloud already running"
        return 0
    fi
    
    # Start nextcloud in background
    if nextcloud &>/dev/null & then
        local nextcloud_pid=$!
        log "✓ Started nextcloud (PID: $nextcloud_pid)"
        
        # Wait a moment and check if it's running
        sleep 3
        if is_process_running "nextcloud"; then
            log "✓ Confirmed nextcloud is running"
        else
            log_error "✗ Nextcloud failed to start properly"
            return 1
        fi
    else
        log_error "✗ Failed to start nextcloud"
        return 1
    fi
}

# Function to handle script interruption
cleanup() {
    log_warn "Script interrupted, cleaning up..."
    exit 130
}

# Trap interrupt signals
trap cleanup INT TERM

main() {
    log "Restoring services from battery save mode..."
    local failed_services=()
    
    # Start services and collect any failures
    if ! start_offlineimap; then
        failed_services+=("offlineimap")
    fi
    
    if ! start_bluetooth; then
        failed_services+=("bluetooth")
    fi
    
    if ! start_nextcloud; then
        failed_services+=("nextcloud")
    fi
    
    # Report results
    if [[ ${#failed_services[@]} -eq 0 ]]; then
        log "✓ All services restored successfully!"
        log "Services started: offlineimap, bluetooth, nextcloud"
    else
        log_error "⚠ Some services failed to start: ${failed_services[*]}"
        exit 1
    fi
}

# Check if script is run with required permissions
if ! sudo -n true 2>/dev/null; then
    log_error "This script requires sudo access for bluetooth control"
    log "Please run: sudo -v"
    exit 1
fi

main "$@"